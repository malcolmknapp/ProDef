# UDL lexer for ProDef.
#
# Description: This lexer handles the formating and color of Product Definition documents.
#              Product Defintion documents are meant to be structured enough that they can be
#              programmatically parsed but also human readable. These document treat everything
#              as a string and uses various transition words to signal the chnages between formatting
#              states. 
#
# Note: UDL is a state machine and it uses regular expressions to move between
#       the different language states.
#

language ProDef

################ Boilerplate ################

# Boilerplate - need to start with family set to markup and IN_M_DEFAULT state,
# we'll later perform a null-transition change to get into the SSL state.
family markup
initial IN_M_DEFAULT
# Null-transition to get into SSL state
state IN_M_DEFAULT:
/./ : redo, => IN_SSL_DEFAULT

################ Language Start ################

family ssl # server side language

# Specify the min and max styles we'll be referring to.
start_style SSL_DEFAULT
end_style SSL_VARIABLE

# If the language has keywords, specify which style needs to be transformed
keyword_style SSL_IDENTIFIER => SSL_WORD
keywords [
        'two words' # Keywords
        ]

# Set the basic patterns we'll be using for styling transitions.
# For most programming languages, names cannot start with a number, but they
# often allow a number after the first character - e.g. "bar21a"
pattern FIRSTNAMECHAR = '_a-zA-Z\x80-\xff' # names (identifier, keyword, variable...) only can start with these chars
pattern NAMECHAR = '$FIRSTNAMECHAR\d'      # rest of the name, after the first char
pattern WS = '\t\r'                    # whitespace
pattern OP = '!%&\(\)\*\+,-\.\/:;<>\?@\^\{\}~|'  # operator characters - escaping special regex values

################ Default Style ################

# Define what happens when in default (initial) state. This is where we set up
# the transitions to other states.'
state IN_SSL_DEFAULT:

# ----------- Entering Comments ---------- #

# C-style one line comments
'//' : paint(upto, SSL_DEFAULT),  => IN_SSL_COMMENT_TO_EOL

# C-style block comments
'/*' : paint(upto, SSL_DEFAULT), => IN_SSL_COMMENT_C_BLOCK

# ----------- Entering Whitespace ---------- #

# Just stay in whatever style we currently are using.
/[$WS]+/  : #stay

# ----------- Entering Strings ---------- #

#'\'' : paint(upto, SSL_DEFAULT), => IN_SSL_SSTRING


# ----------- Entering Numbers ---------- #

# Go process a number, try to do it in regexes octal and hex first.
/0[Xx][0-9a-fA-F]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)  # Hex numbers
/[-+]?0[0-7]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)       # Octal numbers
/[-+]?[1-9]+/ : paint(upto, SSL_DEFAULT), paint(include, SSL_NUMBER)        # Regular numbers

# ----------- Entering Identifiers ---------- #

#/[$FIRSTNAMECHAR][$NAMECHAR]*/ : paint(upto, SSL_DEFAULT), paint(include, SSL_IDENTIFIER)

# ----------- Entering Operators ---------- #

#/[$OP]/ : paint(upto, SSL_DEFAULT), paint(include, SSL_OPERATOR)


################ In Comments - determines how we exit a comment ################

state IN_SSL_COMMENT_TO_EOL: 
/[\r\n]/ : paint(upto, SSL_COMMENT), => IN_SSL_DEFAULT  # back to default state

state IN_SSL_COMMENT_C_BLOCK: 
'*/' : paint(include, SSL_COMMENTBLOCK), => IN_SSL_DEFAULT  # back to default state


################ In Strings - determines how we exit a string ################

#state IN_SSL_DSTRING:  # indicates a future feature
#'\'' : paint(include, SSL_STRING), => IN_SSL_DEFAULT  # back to default state
#/\\./ : #stay, anything escaped means it's still a string


################ Start of State Handling ################
state IN_SSL_DEFAULT:
/^\s+Characteristics/ : paint (upto, SSL_DEFAULT), => IN_CHARACTERISTICS_LIST
/===+/ : paint (include, SSL_DEFAULT), => IN_TABLE_A

state IN_CHARACTERISTICS_LIST:
/^\s+Implementation/ : paint (upto, M_CDATA), => IN_IMPLEMENTATION_LIST
/^\s+Bahvior/ : paint (upto, M_CDATA), => IN_BEHAVIOR_LIST
/---/ : paint (upto, M_CDATA), redo, => IN_SSL_DEFAULT

state IN_IMPLEMENTATION_LIST:
/---/ : paint (upto, M_ATTRNAME), redo, => IN_CHARACTERISTICS_LIST

state IN_BEHAVIOR_LIST:
/---/ : paint (upto, M_ATTRNAME), redo, => IN_CHARACTERISTICS_LIST


state IN_TABLE_A:
/^=+/ : paint (upto, SSL_DEFAULT), => IN_SSL_DEFAULT
/[a-zA-Z]\s\s+/ : paint (include, SSL_VARIABLE),  => IN_TABLE_B
/[a-zA-Z\?\)\]]+\n/  : paint (include, SSL_VARIABLE), => IN_TABLE_B


state IN_TABLE_B:
/^===+/ : paint (upto, SSL_DEFAULT), => IN_SSL_DEFAULT
/[a-zA-Z]\s\s+/ : paint (include, SSL_REGEX),  => IN_TABLE_A
/[a-zA-Z?\)\]]+\n/  : paint (include, SSL_REGEX), => IN_TABLE_A



################ End of State Handling ################




################ Fold Handling ################

fold ":::" SSL_OPERATOR +
fold "<-->" SSL_OPERATOR +
fold "---" SSL_OPERATOR -

################ End of Fold Handling ################
